package com.hawolt.socket.rms;

import com.hawolt.io.Core;
import com.hawolt.rtmp.utility.Base64GZIP;
import com.hawolt.rtmp.utility.ByteMagic;

import javax.xml.bind.DatatypeConverter;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.GZIPInputStream;

/**
 * Created: 01/05/2023 01:50
 * Author: Twitter @hawolt
 **/

public class Test {
    private byte[] buffer = new byte[0];

    public static void main(String[] args) throws IOException {
        String message = "{\"payload\":{\"resource\":\"restrictions/restriction-issued\",\"payload\":\"{\\\"type\\\":\\\"PERMANENT_BAN\\\",\\\"reason\\\":\\\"INAPPROPRIATE_TEXT\\\",\\\"scope\\\":\\\"lol\\\",\\\"vendedRestrictionData\\\":{\\\"expirationMillis\\\":null}}\",\"service\":\"discipline.restriction\",\"version\":\"1.0\",\"timestamp\":1682898335465},\"subject\":\"rms:message\",\"type\":\"push\",\"ts\":1682898335}";
        byte[] payload = Base64GZIP.gzip(message);
        System.err.println(ByteMagic.toHex(payload));
        Test test = new Test();
        test.writeByte((byte) 0b10000010);
        test.writeByte((byte) 0b01111110);
        test.writeByte((byte) ((payload.length >> 8) & 0xFF));
        test.writeByte((byte) ((payload.length) & 0xFF));
        test.writeBytes(payload);
        WebsocketFrame frame = new WebsocketFrame(test.buffer);
        System.out.println(frame.isFinalSegment());
        System.out.println(frame.getRSV1());
        System.out.println(frame.getRSV2());
        System.out.println(frame.getRSV3());
        System.out.println("OP: " + frame.getOpCode());
        System.out.println("MASK: " + frame.isMasked());
        System.out.println(frame.getLengthByte());
        System.out.println(frame.getLengthShort());
        System.out.println(ByteMagic.toHex(test.buffer));
        System.out.println(new String(Base64GZIP.unzip(frame.getPayload())));
        System.out.println("---");
        byte[] data = DatatypeConverter.parseHexBinary("827E00F51F8B08000000000000034D50C16E83300CFD179FBB6E5DD78AE5C6340E3D9421C46107A42A03ABF314481407B40AF1EF73D0A472F37B7ECF7EF6044EDF8CD52DA8093CB21D7C83A062193C35816CCF8F2BF040CC03B6B0B9FB60AA21DC1CD6A06A28B2F29CE6595E5DDED2BC864D2D9334DB7E699EF2B428CA8FA23CA55576A9B2CF6A517063FFDDC69A8519B16FB12DEF6BDF75D0A2904DF8EBC8EBC89DC9186261FBC1987996488C7EA4257E4BDC9033D4E376155E24237A8E9582DDF64970A04EFABA73A076C7E439794DF6FBC3CBF130CBB4E1EB079B109FD1B11219EB2B468BDC2AA41BF83B225E3BE73F4CB62B1250010000");
        System.out.println(data.length);
        //  byte[] data = DatatypeConverter.parseHexBinary
        //byte[] data = DatatypeConverter.parseHexBinary("217E00F51F8B08000000000000004D50C16E83300CFD179FBB6E5DD78AE5C6340E3D9421C46107A42A03ABF314481407B40AF1EF73D0A472F37B7ECF7EF6044EDF8CD52DA8093CB21D7C83A062193C35816CCF8F2BF040CC03B6B0B9FB60AA21DC1CD6A06A28B2F29CE6595E5DDED2BC864D2D9334DB7E699EF2B428CA8FA23CA55576A9B2CF6A517063FFDDC69A8519B16FB12DEF6BDF75D0A2904DF8EBC8EBC89DC9186261FBC1987996488C7EA4257E4BDC9033D4E376155E24237A8E9582DDF64970A04EFABA73A076C7E439794DF6FBC3CBF130CBB4E1EB079B109FD1B11219EB2B468BDC2AA41BF83B225E3BE73F4CB62B1250010000");
        WebsocketFrame t = new WebsocketFrame(data);
        System.out.println(t.isFinalSegment());
        System.out.println(t.getRSV1());
        System.out.println(t.getRSV2());
        System.out.println(t.getRSV3());
        System.out.println("OP: " + t.getOpCode());
        System.out.println("MASK " + t.isMasked());
        System.out.println(t.getLengthByte());
        System.out.println(t.getLengthShort());
        try (GZIPInputStream gis = new GZIPInputStream(new ByteArrayInputStream(t.getPayload()))) {
            String b = Core.read(gis).toString();
            System.out.println(b);
            System.out.println(ByteMagic.toHex(Base64GZIP.gzip(b)));
        }


    }

    public void writeByte(byte b) {
        writeBytes(b);
    }

    public void writeBytes(byte... bytes) {
        byte[] b = new byte[buffer.length + bytes.length];
        System.arraycopy(buffer, 0, b, 0, buffer.length);
        System.arraycopy(bytes, 0, b, buffer.length, bytes.length);
        this.buffer = b;
    }
}
